{"version":3,"sources":["CharacterCounter.js","recoil.js","TodoItemCreator.js","TodoItem.js","Todolist.js","index.js"],"names":["charCountState","selector","key","get","textState","length","CharacterCount","count","useRecoilValue","CharacterCounter","TextInput","atom","default","useRecoilState","text","setText","type","value","onChange","event","target","todoListState","TodoItemCreator","useState","inputValue","setInputValue","setTodoList","useSetRecoilState","id","onClick","oldTodoList","isComplete","replaceItemAtIndex","arr","index","newValue","slice","TodoItem","item","todoList","findIndex","listItem","newList","checked","removeItemAtIndex","TodoList","map","todoItem","rootElement","document","getElementById","createRoot","render"],"mappings":"2KAEMA,EAAiBC,YAAS,CAC9BC,IAAK,iBACLC,IAAK,YAGH,OAFaA,EADG,EAAVA,KACWC,GAELC,MACb,IAEH,SAASC,IACP,IAAMC,EAAQC,YAAeR,GAC7B,OAAO,yDAAoBO,IAC5B,CAEc,SAASE,IACtB,OACE,gCACE,cAACC,EAAD,IACA,cAACJ,EAAD,MAGL,CACD,IAAMF,EAAYO,YAAK,CACrBT,IAAK,YACLU,QAAS,MAEX,SAASF,IACP,MAAwBG,YAAeT,GAAvC,mBAAOU,EAAP,KAAaC,EAAb,KAMA,OACE,gCACE,uBAAOC,KAAK,OAAOC,MAAOH,EAAMI,SANnB,SAACC,GAChBJ,EAAQI,EAAMC,OAAOH,MACtB,IAKG,uBAFF,SAGSH,IAGZ,C,WCvCKO,EAAgBV,YAAK,CACzBT,IAAK,gBACLU,QAAS,KCiCIU,EAjCS,WACtB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAcC,YAAkBN,GAElCO,EAAK,EAqBT,OACE,gCACE,uBAAOZ,KAAK,OAAOC,MAAOO,EAAYN,SANzB,SAAC,GAA2B,IAAfD,EAAc,EAAxBG,OAAUH,MAC5BQ,EAAcR,EACf,IAKG,wBAAQY,QAnBI,WACdH,GAAY,SAACI,GAAD,4BACPA,GADO,CAEV,CACEF,GAPGA,IAQHd,KAAMU,EACNO,YAAY,IALJ,IAQZN,EAAc,GACf,EASG,mBAGL,E,OCQD,SAASO,EAAmBC,EAAKC,EAAOC,GACtC,MAAM,GAAN,mBAAWF,EAAIG,MAAM,EAAGF,IAAxB,CAAgCC,GAAhC,YAA6CF,EAAIG,MAAMF,EAAQ,IAChE,CAKcG,MAhDE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,EAAgCzB,YAAeQ,GAA/C,mBAAOkB,EAAP,KAAiBb,EAAjB,KACMQ,EAAQK,EAASC,WAAU,SAACC,GAAD,OAAcA,IAAaH,CAA3B,IA0BjC,OACE,gCACE,uBAAOtB,KAAK,OAAOC,MAAOqB,EAAKxB,KAAMI,SA1BpB,SAAC,GAA2B,IAAfD,EAAc,EAAxBG,OAAUH,MAC1ByB,EAAUV,EAAmBO,EAAUL,EAAX,YAAC,eAC9BI,GAD6B,IAEhCxB,KAAMG,KAGRS,EAAYgB,EACb,IAoBG,uBACE1B,KAAK,WACL2B,QAASL,EAAKP,WACdb,SArBuB,WAC3B,IAAMwB,EAAUV,EAAmBO,EAAUL,EAAX,YAAC,eAC9BI,GAD6B,IAEhCP,YAAaO,EAAKP,cAGpBL,EAAYgB,EACb,IAgBG,wBAAQb,QAdO,WACjB,IAAMa,EAsBV,SAA2BT,EAAKC,GAC9B,MAAM,GAAN,mBAAWD,EAAIG,MAAM,EAAGF,IAAxB,YAAmCD,EAAIG,MAAMF,EAAQ,IACtD,CAxBmBU,CAAkBL,EAAUL,GAE5CR,EAAYgB,EACb,EAUG,iBAGL,ECrBcG,EAhBE,WACf,IAAMN,EAAW/B,YAAea,GAEhC,OACE,qCAGE,cAAC,EAAD,IAECkB,EAASO,KAAI,SAACC,GAAD,OACZ,cAAC,EAAD,CAA4BT,KAAMS,GAAnBA,EAASnB,GADZ,MAKnB,ECZKoB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,eAAC,IAAD,WACE,cAAC3C,EAAD,IACA,cAAC,EAAD,S","file":"static/js/main.5482afaf.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { atom, selector, useRecoilState, useRecoilValue } from \"recoil\";\nconst charCountState = selector({\n  key: \"charCountState\",\n  get: ({ get }) => {\n    const text = get(textState);\n\n    return text.length;\n  }\n});\nfunction CharacterCount() {\n  const count = useRecoilValue(charCountState);\n  return <>Character Count: {count}</>;\n}\n\nexport default function CharacterCounter() {\n  return (\n    <div>\n      <TextInput />\n      <CharacterCount />\n    </div>\n  );\n}\nconst textState = atom({\n  key: \"textState\",\n  default: \"1\"\n});\nfunction TextInput() {\n  const [text, setText] = useRecoilState(textState);\n\n  const onChange = (event) => {\n    setText(event.target.value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={text} onChange={onChange} />\n      <br />\n      Echo: {text}\n    </div>\n  );\n}\n","import { atom } from \"recoil\";\n\nconst todoListState = atom({\n  key: \"todoListState\",\n  default: []\n});\n\nexport { todoListState };\n","import { useSetRecoilState } from \"recoil\";\nimport { useState } from \"react\";\nimport { todoListState } from \"./recoil\";\n\nconst TodoItemCreator = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const setTodoList = useSetRecoilState(todoListState);\n  // 用于创建唯一 id 的工具函数\n  let id = 0;\n  function getId() {\n    return id++;\n  }\n\n  const addItem = () => {\n    setTodoList((oldTodoList) => [\n      ...oldTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n        isComplete: false\n      }\n    ]);\n    setInputValue(\"\");\n  };\n\n  const onChange = ({ target: { value } }) => {\n    setInputValue(value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={inputValue} onChange={onChange} />\n      <button onClick={addItem}>Add</button>\n    </div>\n  );\n};\n\nexport default TodoItemCreator;\n","import { useRecoilState } from \"recoil\";\nimport { todoListState } from \"./recoil\";\nconst TodoItem = ({ item }) => {\n  const [todoList, setTodoList] = useRecoilState(todoListState);\n  const index = todoList.findIndex((listItem) => listItem === item);\n\n  const editItemText = ({ target: { value } }) => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      text: value\n    });\n\n    setTodoList(newList);\n  };\n\n  const toggleItemCompletion = () => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      isComplete: !item.isComplete\n    });\n\n    setTodoList(newList);\n  };\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(todoList, index);\n\n    setTodoList(newList);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={item.text} onChange={editItemText} />\n      <input\n        type=\"checkbox\"\n        checked={item.isComplete}\n        onChange={toggleItemCompletion}\n      />\n      <button onClick={deleteItem}>X</button>\n    </div>\n  );\n};\n\nfunction replaceItemAtIndex(arr, index, newValue) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n}\n\nfunction removeItemAtIndex(arr, index) {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}\nexport default TodoItem;\n","import { useRecoilValue } from \"recoil\";\nimport TodoItemCreator from \"./TodoItemCreator\";\nimport { todoListState } from \"./recoil\";\nimport TodoItem from \"./TodoItem\";\nconst TodoList = () => {\n  const todoList = useRecoilValue(todoListState);\n\n  return (\n    <>\n      {/* <TodoListStats /> */}\n      {/* <TodoListFilters /> */}\n      <TodoItemCreator />\n\n      {todoList.map((todoItem) => (\n        <TodoItem key={todoItem.id} item={todoItem} />\n      ))}\n    </>\n  );\n};\n\nexport default TodoList;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport CharacterCounter from \"./CharacterCounter\";\nimport { RecoilRoot } from \"recoil\";\nimport TodoList from \"./Todolist\";\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <RecoilRoot>\n      <CharacterCounter />\n      <TodoList />\n    </RecoilRoot>\n  </StrictMode>\n);\n"],"sourceRoot":""}